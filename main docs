
Capstone Project: Tree-Structured File System for University Data Management
This document outlines the structure and key components of a capstone project focused on designing a tree-structured file system tailored for a university environment.
6. Implementation
This section details the design and implementation considerations for a tree-structured file system within a university context.
Designing a Tree-Structured File System for a University Use Case
We will design a file system to manage the diverse data generated and utilized within a university. This includes academic records, course materials, research data, administrative documents, and user-specific files. The core principle will be a hierarchical structure that reflects the organizational structure and logical grouping of data within the university.
Top-Level Directories: The root directory will branch into major functional areas:
/academics: Contains all academic-related data.
/research: Houses research projects, publications, and datasets.
/admin: Stores administrative documents and records.
/users: Provides individual storage space for students, faculty, and staff.
/shared: For university-wide shared resources and announcements.
Sub-Directories (Examples):
/academics:
/courses: Organized by department and course code (e.g., /academics/courses/CS/CS101).
/student_records: Contains individual student transcripts and academic history (access controlled).
/faculty_resources: Materials and documents for faculty members.
/research:
/projects: Organized by project name or research lab (e.g., /research/projects/AI_Lab/ProjectAlpha).
/publications: Repository of faculty and student publications.
/datasets: Storage for research datasets.
/admin:
/finance: Financial records and reports (access controlled).
/hr: Human resources documents (access controlled).
/registrar: Student admission and registration information (access controlled).
/users:
Each user will have a dedicated directory named after their unique ID or username (e.g., /users/student123, /users/prof_smith).
/shared:
/announcements: University-wide announcements and notices.
/public_documents: Publicly accessible documents like university policies.
Directory Hierarchy Diagrams
We will use visual diagrams to represent the designed directory structure. Examples include:
Code snippet
Further detailed diagrams will illustrate sub-directories within specific branches.
Examples of File Paths and User Interactions
File Path Example: The syllabus for the CS101 course could be located at /academics/courses/CS/CS101/syllabus_fall2024.pdf.
User Interactions:
A student (student123) saving their assignment for CS101: The file would be saved in /users/student123/courses/CS101/assignment1.docx.
A professor (prof_smith) uploading lecture notes for CS201: The file would be saved in /academics/courses/CS/CS201/lectures/week3.pptx.
An administrator in the HR department accessing an employee's record: The file would be accessed through a path like /admin/hr/employee_records/john_doe.pdf (access permissions required).
A user searching for all documents related to "AI" within the research projects: The search mechanism would traverse the /research/projects directory.
Access Control Strategies
We will implement a role-based access control (RBAC) system to manage permissions:
Roles: Define various roles within the university (e.g., student, faculty, administrator, researcher).
Permissions: Assign specific permissions to each role (e.g., read, write, execute, delete) for different directories and files.
User-Role Assignment: Associate users with one or more roles.
Examples:
Students have read/write access to their own /users/<username> directory and read access to course materials in /academics/courses/<department>/<course_code>.
Faculty have read/write access to their /users/<username> directory and the course directories they manage. They might have read access to student records within their courses.
Administrators have broad access to the /admin directory with varying levels of permissions based on their specific administrative roles (e.g., finance administrators have write access to /admin/finance).
Researchers have read/write access to their project directories within /research/projects.
Implementation will likely involve storing access control lists (ACLs) or role assignments associated with directories and files.
File Retrieval and Search Mechanisms
Path-Based Retrieval: Users can directly access files if they know the exact file path.
Search Functionality: Implement a search mechanism that allows users to find files based on:
Filename: Exact or partial matching.
File Content: Keyword-based search (depending on the complexity desired).
Metadata: Searching by file type, creation date, modification date, author (if applicable).
Location: Restricting search to specific directories.
The search mechanism could employ techniques like:
Simple Linear Scan: Iterating through the directory structure (less efficient for large systems).
Indexing: Creating an index of filenames and potentially content for faster searching.
Metadata Databases: Storing file metadata in a database for efficient querying.
7. Results and Discussion
This section will present the outcomes of the design or simulation and analyze its characteristics.
Outcomes of your design or simulation:
A fully defined directory structure tailored to the university use case.
A clear mapping of user roles to directory and file permissions.
Demonstration of file path navigation and example search queries.
(If a simulation is performed) Performance metrics for file access and search operations under different load conditions.
Analysis of efficiency, usability, or performance:
Efficiency: Evaluation of the directory structure in terms of organization and ease of locating files. Assessment of the chosen search mechanism's time complexity.
Usability: Analysis of the intuitiveness of the directory hierarchy for different user groups. Examination of the user interface (if any) for file management and search.
Performance: (If simulated) Measurement of file read/write speeds, search times, and resource utilization. Identification of potential bottlenecks.
Comparison with other file organization techniques:
Briefly discuss alternative file organization methods (e.g., flat file systems, tag-based systems).
Compare the advantages and disadvantages of the tree-structured approach in the context of the university use case against these alternatives. Highlight why a hierarchical structure is suitable.
Challenges faced during the implementation:
Discuss any difficulties encountered during the design process, such as:
Defining a clear and logical directory structure for diverse data types.
Determining appropriate access control policies for different user roles and data sensitivity.
Choosing an efficient search mechanism that balances performance and complexity.
Handling potential issues like naming conflicts or deeply nested directories.
9. References
This section will list all academic papers, system manuals, and official documentation consulted during the project. Examples include:
Silberschatz, A., Galvin, P. B., & Gagne, G. (Year). Operating System Concepts. Publisher.
Tanenbaum, A. S. (Year). Modern Operating Systems. Publisher.
Relevant documentation for existing file systems (e.g., Linux file system hierarchy standard).
Academic papers on file system design, access control, and search algorithms.
10. Appendices
This section will include supplementary materials:
Code Snippets: If a simulation or partial implementation is done, relevant code snippets demonstrating directory creation, file operations, or access control mechanisms will be included.
Additional Diagrams: More detailed diagrams of specific sub-directories or the access control model.
User Scenarios: Detailed step-by-step scenarios illustrating how different users interact with the file system for common tasks (e.g., submitting an assignment, accessing research data, retrieving an administrative document).
Data Models: If a database is used for metadata or access control, the schema of the database will be included.
This detailed outline provides a comprehensive structure for your capstone project on file system organization using a system tree, specifically tailored for a university environment. Remember to adapt and expand upon these points based on the specific scope and depth of your project.

